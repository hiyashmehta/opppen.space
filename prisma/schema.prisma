// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL") // uses connection pooling
    // relationMode = "prisma"

    // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
    // shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

generator client {
    provider        = "prisma-client-js"
    // previewFeatures = ["jsonProtocol"]
    previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model User {
    id             String         @id @default(cuid())
    name           String?
    // if you are using Github OAuth, you can get rid of the username attribute (that is for Twitter OAuth)
    username       String?
    gh_username    String?
    email          String?        @unique
    emailVerified  DateTime?
    image          String?
    createdAt      DateTime       @default(now())
    updatedAt      DateTime       @updatedAt
    accounts       Account[]
    sessions       Session[]
    subscriptions  Subscription[]
    communities    Community[]
    Members        Members[]
    Post           Post[]
    Like           Like[]
    Comment        Comment[]
    Course         Course[]
    Notification   Notification[]
    Conversation   Conversation?  @relation(fields: [conversationId], references: [id])
    conversationId String?
    messages       Message[]
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.LongText
    refresh_token_expires_in Int?
    access_token             String? @db.LongText
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.LongText
    session_state            String?
    oauth_token_secret       String?
    oauth_token              String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Subscription {
    id          String     @id @default(uuid())
    createdAt   DateTime   @default(now())
    price       Float
    active      Boolean    @default(false)
    community   Community? @relation(fields: [communityId], references: [id], onDelete: Cascade)
    communityId String?
    user        User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String?
}

model Community {
    id              String            @id @default(uuid())
    name            String
    description     String
    privacy         Community_PRIVACY
    gallery         String
    jsonDescription String?
    htmlDescription String?
    icon            String?
    favicon         String?
    banner          String?
    courses         Course[]
    members         Members[]
    posts           Post[]
    user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId          String
    domain          String?           @unique
    subdomain       String?           @unique
    slug            String?           @unique
    subscription    Subscription[]
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt
    Notification    Notification[]
}

model Members {
    id          String      @id @default(uuid())
    role        Member_ROLE
    user        User        @relation(fields: [userId], references: [id])
    userId      String
    community   Community   @relation(fields: [communityId], references: [id])
    communityId String
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
}

model Post {
    id           String         @id @default(uuid())
    title        String
    content      String
    htmlContent  String
    jsonContent  String
    image        String
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    author       User           @relation(fields: [userId], references: [id])
    authorId     String
    likes        Like[]
    comments     Comment[]
    community    Community      @relation(fields: [communityId], references: [id])
    communityId  String
    userId       String
    status       Post_Status    @default(DRAFT)
    slug         String?        @unique
    Notification Notification[]
}

model Meta_Data {
    id        String   @id @default(uuid())
    key       String
    value     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum Post_Status {
    PUBLISHED
    DRAFT
}

model Like {
    id           String         @id @default(uuid())
    post         Post           @relation(fields: [postId], references: [id])
    postId       String
    user         User           @relation(fields: [userId], references: [id])
    userId       String
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    Notification Notification[]
}

model Comment {
    id        String   @id @default(uuid())
    content   String
    post      Post     @relation(fields: [postId], references: [id])
    postId    String
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    replied   Boolean? @default(false)

    // self relation 1 to many for comments
    reply        Comment[]      @relation(name: "CommentToComment")
    Comment      Comment?       @relation(name: "CommentToComment", fields: [commentId], references: [id])
    commentId    String?
    Notification Notification[]
}

model Course {
    id          String            @id @default(uuid())
    name        String
    description String
    thumbnail   String
    privacy     Community_PRIVACY
    status      Post_Status       @default(DRAFT)
    modules     Module[]
    sections    Section[]

    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    Community    Community?     @relation(fields: [communityId], references: [id])
    communityId  String?
    user         User?          @relation(fields: [userId], references: [id])
    userId       String?
    Notification Notification[]
}

model Module {
    id           String         @id @default(uuid())
    Course       Course?        @relation(fields: [courseId], references: [id])
    courseId     String?
    Notification Notification[]
}

model Section {
    id           String         @id @default(uuid())
    Course       Course?        @relation(fields: [courseId], references: [id])
    courseId     String?
    Notification Notification[]
}

model Conversation {
    id            String    @id @default(uuid())
    participants  User[]
    messages      Message[]
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    name          String?
    lastMessageAt DateTime? @default(now())
}

model Message {
    id           String         @id @default(uuid())
    Notification Notification[]

    Conversation   Conversation? @relation(fields: [conversationId], references: [id])
    conversationId String?
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt
    content        String
    image          String?
    read           Boolean       @default(false)
    user           User          @relation(fields: [userId], references: [id])
    userId         String
}

model Notification {
    id          String           @id @default(uuid())
    createdAt   DateTime         @default(now())
    updatedAt   DateTime         @updatedAt
    read        Boolean          @default(false)
    type        NotificationType
    user        User             @relation(fields: [userId], references: [id])
    userId      String
    link        String
    image       String
    icon        String
    color       String
    title       String
    description String
    community   Community        @relation(fields: [communityId], references: [id])
    communityId String
    post        Post?            @relation(fields: [postId], references: [id])
    postId      String?
    comment     Comment?         @relation(fields: [commentId], references: [id])
    commentId   String?
    like        Like?            @relation(fields: [likeId], references: [id])
    likeId      String?
    message     Message?         @relation(fields: [messageId], references: [id])
    messageId   String?
    course      Course?          @relation(fields: [courseId], references: [id])
    courseId    String?
    module      Module?          @relation(fields: [moduleId], references: [id])
    moduleId    String?
    section     Section?         @relation(fields: [sectionId], references: [id])
    sectionId   String?
}

enum NotificationType {
    COMMUNITY
    POST
    COMMENT
    LIKE
    MESSAGE
    COURSE
    MODULE
    SECTION
    COMMON
}

enum Community_PRIVACY {
    PUBLIC
    PRIVATE
}

enum Member_ROLE {
    ADMIN
    MEMBER
}
